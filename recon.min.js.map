{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","recon.min.js","recon.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","recon","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","recon-js","parse","string","input","StringIterator","result","DocumentParser","run","state","stringify","value","options","writer","ReconWriter","block","writeValue","writeBlock","base64","undefined","Uint8Array","data","DataBuilder","cs","isEmpty","appendBase64Char","head","step","isRecord","item","Array","isArray","isObject","isField","isAttr","keys","Object","key","charCodeAt","isBlockSafe","record","isMarkupSafe","header","$key","$value","tail","builder","RecordBuilder","appendItem","appendField","tag","get","equal","set","setRecord","setObject","field","updated","push","defineProperty","enumerable","configurable","writable","concat","x","y","appendRecord","appendFields","equalRecord","equalFields","equalData","xKeys","yKeys","compare","compareData","compareRecord","compareFields","p","q","Math","min","order","xKey","yKey","compareName","x0","y0","coerce","arguments","coerceValue","coerceRecord","coerceObject","items","isNaN","parseInt","fields","ValueBuilder","index","more","StringIteratee","StringBuilder","buffer","offset","aliased","isSpace","c","isNewline","isWhitespace","isNameStartChar","isNameChar","isBase64Char","BlockParser","AttrParser","ident","BlockValueParser","InlineValueParser","RecordParser","MarkupParser","text","IdentParser","StringParser","NumberParser","DataParser","isUnreservedChar","isSubDelimChar","isSchemeChar","isUserInfoChar","isUserChar","isHostChar","isPathChar","isQueryChar","isParamChar","isFragmentChar","isAlpha","isDigit","isHexChar","decodeDigit","decodeHex","encodeHex","toLowerCase","UriParser","scheme","authority","path","query","fragment","SchemeParser","AuthorityParser","userInfo","host","port","UserInfoParser","username","password","c1","HostParser","HostAddressParser","HostLiteralParser","PortParser","PathParser","QueryParser","FragmentParser","parseUri","parseAuthority","parsePath","stringifyUri","uri","UriWriter","writeUri","resolveUri","base","relative","absolute","removeDotSegments","mergeUriPath","relativePath","mergePath","slice","segments","unshift","basePath","shift","next","unresolveUri","absolutePath","unmergePath","config","prototype","appendValue","isDone","c2","dup","Done","create","isCont","isError","feed","constructor","error","found","String","fromCharCode","unexpectedEOF","append","appendString","prepare","size","expand","max","array","appendByte","decodeBase64Digit","decodeBase64Quantum","z","w","subarray","expected","Number","writeText","writeNumber","writeBool","writeData","writeRecord","writeItem","writeSlots","writeAttrs","attrs","writeAttr","substring","writeIdent","slots","writeSlot","writeItems","inBlock","inMarkup","inBraces","inBrackets","first","writeMarkupText","isIdent","writeString","number","toString","bool","encodeBase64Digit","look","hostinfo","userinfo","name","ipv4","ipv6","k","v","param","writeScheme","writeAuthority","writePath","writeQuery","writeFragment","writeUserInfo","writeUser","writeHost","writeHostLiteral","writePort","writeEncoded","user","digits","floor","segment","writePathSegment","writeQueryPart","writeQueryArray","writeQueryParams","writeQueryParam","params","j","writePctEncoded","resolve","unresolve","apply","./config.json"],"mappings":"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","file":"recon.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.3.6\"}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.recon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.3.6\"}\n},{}],\"recon-js\":[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction compare(x, y) {\n  if (x === true) x = 'true';\n  else if (x === false) x = 'false';\n  if (y === true) y = 'true';\n  else if (y === false) y = 'false';\n\n  if (x === undefined) {\n    if (y === undefined) return 0;\n    else return 1;\n  }\n  else if (x === null) {\n    if (y === undefined) return -1;\n    else if (y === null) return 0;\n    else return 1;\n  }\n  else if (typeof x === 'number') {\n    if (y === undefined || y === null) return -1;\n    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (typeof x === 'string') {\n    if (y === undefined || y === null || typeof y === 'number') return -1;\n    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (x instanceof Uint8Array) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;\n    else if (y instanceof Uint8Array) return compareData(x, y);\n    else return 1;\n  }\n  else if (Array.isArray(x)) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array) return -1;\n    else if (Array.isArray(y)) return compareRecord(x, y);\n    else return 1;\n  }\n  else {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array || Array.isArray(y)) return -1;\n    else return compareFields(x, y);\n  }\n}\nfunction compareRecord(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = compare(x[i], y[i]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var p = xKeys.length;\n  var q = yKeys.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    var xKey = xKeys[i];\n    var yKey = yKeys[i];\n    order = compareName(xKey, yKey);\n    if (order === 0) order = compare(x[xKey], y[yKey]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareName(x, y) {\n  var p = x.length;\n  var q = y.length;\n  if (p > 0 && q > 0) {\n    var x0 = x.charCodeAt(0);\n    var y0 = y.charCodeAt(0);\n    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;\n    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;\n    else return x < y ? -1 : x > y ? 1 : 0;\n  }\n  else if (p > 0) return 1;\n  else if (q > 0) return -1;\n  else return 0;\n}\nfunction compareData(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = x[i] - y[i];\n  }\n  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n  else if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.compare = compare;\nexports.uri = uri;\nexports.config = config;\n\n},{\"./config.json\":1}]},{},[])(\"recon-js\")\n});\n\n","'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction compare(x, y) {\n  if (x === true) x = 'true';\n  else if (x === false) x = 'false';\n  if (y === true) y = 'true';\n  else if (y === false) y = 'false';\n\n  if (x === undefined) {\n    if (y === undefined) return 0;\n    else return 1;\n  }\n  else if (x === null) {\n    if (y === undefined) return -1;\n    else if (y === null) return 0;\n    else return 1;\n  }\n  else if (typeof x === 'number') {\n    if (y === undefined || y === null) return -1;\n    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (typeof x === 'string') {\n    if (y === undefined || y === null || typeof y === 'number') return -1;\n    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (x instanceof Uint8Array) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;\n    else if (y instanceof Uint8Array) return compareData(x, y);\n    else return 1;\n  }\n  else if (Array.isArray(x)) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array) return -1;\n    else if (Array.isArray(y)) return compareRecord(x, y);\n    else return 1;\n  }\n  else {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array || Array.isArray(y)) return -1;\n    else return compareFields(x, y);\n  }\n}\nfunction compareRecord(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = compare(x[i], y[i]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var p = xKeys.length;\n  var q = yKeys.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    var xKey = xKeys[i];\n    var yKey = yKeys[i];\n    order = compareName(xKey, yKey);\n    if (order === 0) order = compare(x[xKey], y[yKey]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareName(x, y) {\n  var p = x.length;\n  var q = y.length;\n  if (p > 0 && q > 0) {\n    var x0 = x.charCodeAt(0);\n    var y0 = y.charCodeAt(0);\n    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;\n    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;\n    else return x < y ? -1 : x > y ? 1 : 0;\n  }\n  else if (p > 0) return 1;\n  else if (q > 0) return -1;\n  else return 0;\n}\nfunction compareData(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = x[i] - y[i];\n  }\n  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n  else if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.compare = compare;\nexports.uri = uri;\nexports.config = config;\n"],"sourceRoot":"/source/"}