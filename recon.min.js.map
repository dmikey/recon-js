{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","recon.min.js","recon.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","recon","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","recon-js","parse","string","input","StringIterator","result","DocumentParser","run","state","stringify","value","options","writer","ReconWriter","block","writeValue","writeBlock","base64","undefined","Uint8Array","data","DataBuilder","cs","isEmpty","appendBase64Char","head","step","isRecord","item","Array","isArray","isObject","isField","isAttr","keys","Object","key","charCodeAt","isBlockSafe","record","isMarkupSafe","header","$key","$value","tail","builder","RecordBuilder","appendItem","appendField","tag","get","equal","set","setRecord","setObject","field","updated","push","defineProperty","enumerable","configurable","writable","concat","x","y","appendRecord","appendFields","equalRecord","equalFields","equalData","xKeys","yKeys","coerce","arguments","coerceValue","coerceRecord","coerceObject","items","isNaN","parseInt","fields","ValueBuilder","index","more","StringIteratee","StringBuilder","buffer","offset","aliased","p","q","isSpace","c","isNewline","isWhitespace","isNameStartChar","isNameChar","isBase64Char","BlockParser","AttrParser","ident","BlockValueParser","InlineValueParser","RecordParser","MarkupParser","text","IdentParser","StringParser","NumberParser","DataParser","isUnreservedChar","isSubDelimChar","isSchemeChar","isUserInfoChar","isUserChar","isHostChar","isPathChar","isQueryChar","isParamChar","isFragmentChar","isAlpha","isDigit","isHexChar","decodeDigit","decodeHex","encodeHex","toLowerCase","UriParser","scheme","authority","path","query","fragment","SchemeParser","AuthorityParser","userInfo","host","port","UserInfoParser","username","password","c1","HostParser","HostAddressParser","HostLiteralParser","PortParser","PathParser","QueryParser","FragmentParser","parseUri","parseAuthority","parsePath","stringifyUri","uri","UriWriter","writeUri","resolveUri","base","relative","absolute","removeDotSegments","mergeUriPath","relativePath","mergePath","slice","segments","unshift","basePath","shift","next","unresolveUri","absolutePath","unmergePath","config","prototype","appendValue","isDone","c2","dup","Done","create","isCont","isError","feed","constructor","error","unexpectedEOF","append","String","fromCharCode","appendString","prepare","size","expand","Math","max","array","appendByte","decodeBase64Digit","decodeBase64Quantum","z","w","subarray","found","expected","Number","writeRecord","writeText","writeNumber","writeBool","writeData","writeItem","writeSlots","writeAttrs","attrs","writeAttr","substring","writeIdent","slots","writeSlot","writeItems","inBlock","inMarkup","inBraces","inBrackets","first","writeMarkupText","isIdent","writeString","number","toString","bool","encodeBase64Digit","look","hostinfo","userinfo","name","ipv4","ipv6","k","v","param","writeScheme","writeAuthority","writePath","writeQuery","writeFragment","writeUserInfo","writeUser","writeHost","writeHostLiteral","writePort","writeEncoded","user","digits","floor","segment","writePathSegment","writeQueryPart","writeQueryArray","writeQueryParams","writeQueryParam","params","j","writePctEncoded","resolve","unresolve","apply","./config.json"],"mappings":"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","file":"recon.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.3.3\"}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.recon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.3.3\"}\n},{}],\"recon-js\":[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.uri = uri;\nexports.config = config;\n\n},{\"./config.json\":1}]},{},[])(\"recon-js\")\n});\n\n","'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.uri = uri;\nexports.config = config;\n"],"sourceRoot":"/source/"}