{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","recon.min.js","recon.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","recon","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","recon-js","parse","string","input","StringIterator","result","DocumentParser","run","state","stringify","value","options","writer","ReconWriter","block","writeValue","writeBlock","base64","undefined","Uint8Array","data","DataBuilder","cs","isEmpty","appendBase64Char","head","step","isRecord","item","Array","isArray","isObject","isField","isAttr","keys","Object","key","charCodeAt","isBlockSafe","record","isMarkupSafe","size","header","$key","$value","tail","builder","RecordBuilder","appendItem","appendField","tag","has","get","equal","set","setRecord","setObject","field","updated","push","defineProperty","enumerable","configurable","writable","remove","removeRecord","removeObject","splice","prototype","apply","values","forEach","callback","thisArg","concat","x","y","appendRecord","appendFields","equalRecord","equalFields","equalData","xKeys","yKeys","compare","compareData","compareRecord","compareFields","p","q","Math","min","order","xKey","yKey","compareName","x0","y0","coerce","arguments","coerceValue","coerceRecord","coerceObject","items","isNaN","parseInt","fields","ValueBuilder","index","more","StringIteratee","StringBuilder","buffer","offset","aliased","isSpace","c","isNewline","isWhitespace","isNameStartChar","isNameChar","isBase64Char","BlockParser","AttrParser","ident","BlockValueParser","InlineValueParser","RecordParser","MarkupParser","text","IdentParser","StringParser","NumberParser","DataParser","isUnreservedChar","isSubDelimChar","isSchemeChar","isUserInfoChar","isUserChar","isHostChar","isPathChar","isQueryChar","isParamChar","isFragmentChar","isAlpha","isDigit","isHexChar","decodeDigit","decodeHex","encodeHex","toLowerCase","UriParser","scheme","authority","path","query","fragment","SchemeParser","AuthorityParser","userInfo","host","port","UserInfoParser","username","password","c1","HostParser","HostAddressParser","HostLiteralParser","PortParser","PathParser","QueryParser","FragmentParser","parseUri","parseAuthority","parsePath","stringifyUri","uri","UriWriter","writeUri","resolveUri","base","relative","absolute","removeDotSegments","mergeUriPath","relativePath","mergePath","slice","segments","unshift","basePath","shift","next","unresolveUri","absolutePath","unmergePath","config","appendValue","isDone","c2","dup","Done","create","isCont","isError","feed","constructor","error","found","String","fromCharCode","unexpectedEOF","append","appendString","prepare","expand","max","array","appendByte","decodeBase64Digit","decodeBase64Quantum","z","w","subarray","expected","Number","writeText","writeNumber","writeBool","writeData","writeRecord","writeItem","writeSlots","writeAttrs","attrs","writeAttr","substring","writeIdent","slots","writeSlot","writeItems","inBlock","inMarkup","inBraces","inBrackets","first","writeMarkupText","isIdent","writeString","number","toString","bool","encodeBase64Digit","look","hostinfo","userinfo","name","ipv4","ipv6","k","v","param","writeScheme","writeAuthority","writePath","writeQuery","writeFragment","writeUserInfo","writeUser","writeHost","writeHostLiteral","writePort","writeEncoded","user","digits","floor","segment","writePathSegment","writeQueryPart","writeQueryArray","writeQueryParams","writeQueryParam","params","j","writePctEncoded","resolve","unresolve","./config.json"],"mappings":"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","file":"recon.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.3.8\"}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.recon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.3.8\"}\n\n},{}],\"recon-js\":[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction size(value) {\n  if (isRecord(value)) return value.length;\n  else if (isObject(value)) return Object.keys(value).length;\n  else return 0;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction has(record, key) {\n  return get(record, key) !== undefined;\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isField(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isField(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isField(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction remove(record, key) {\n  if (isRecord(record)) removeRecord(record, key);\n  else if (isObject(record)) removeObject(record, key);\n}\nfunction removeRecord(record, key) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isField(item)) {\n      if (item[key] !== undefined) {\n        delete item[key];\n        delete record[key];\n        if (Object.keys(item).length === 0) {\n          record.splice(i, 1);\n          i -= 1;\n          n -= 1;\n        }\n      }\n      else if (equal(item.$key, key)) {\n        record.splice(i, 1);\n        i -= 1;\n        n -= 1;\n      }\n    }\n  }\n}\nfunction removeObject(record, key) {\n  if (typeof key === 'string') {\n    delete record[key];\n  }\n}\n\nfunction keys(record) {\n  if (isRecord(record)) {\n    var keys = [];\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        var key = item.$key;\n        if (key !== undefined) keys.push(key);\n        else Array.prototype.push.apply(keys, Object.keys(item));\n      }\n    }\n    return keys;\n  }\n  else if (isObject(record)) {\n    return Object.keys(record);\n  }\n  else {\n    return [];\n  }\n}\n\nfunction values(record) {\n  var values = [];\n  var key;\n  if (isRecord(record)) {\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        key = item.$key;\n        if (key !== undefined) {\n          values.push(item.$value);\n        }\n        else {\n          for (key in item) {\n            values.push(item[key]);\n          }\n        }\n      }\n      else {\n        values.push(item);\n      }\n    }\n  }\n  else if (isObject(record)) {\n    for (key in record) {\n      values.push(record[key]);\n    }\n  }\n  return values;\n}\n\nfunction forEach(record, callback, thisArg) {\n  var key, value;\n  if (isRecord(record)) {\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        key = item.$key;\n        if (key !== undefined) {\n          value = item.$value;\n          callback.call(thisArg, value, key, record);\n        }\n        else {\n          for (key in item) {\n            value = item[key];\n            callback.call(thisArg, value, key, record);\n          }\n        }\n      }\n      else {\n        callback.call(thisArg, item, undefined, record);\n      }\n    }\n  }\n  else if (isObject(record)) {\n    for (key in record) {\n      value = record[key];\n      callback.call(thisArg, value, key, record);\n    }\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction compare(x, y) {\n  if (x === true) x = 'true';\n  else if (x === false) x = 'false';\n  if (y === true) y = 'true';\n  else if (y === false) y = 'false';\n\n  if (x === undefined) {\n    if (y === undefined) return 0;\n    else return 1;\n  }\n  else if (x === null) {\n    if (y === undefined) return -1;\n    else if (y === null) return 0;\n    else return 1;\n  }\n  else if (typeof x === 'number') {\n    if (y === undefined || y === null) return -1;\n    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (typeof x === 'string') {\n    if (y === undefined || y === null || typeof y === 'number') return -1;\n    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (x instanceof Uint8Array) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;\n    else if (y instanceof Uint8Array) return compareData(x, y);\n    else return 1;\n  }\n  else if (Array.isArray(x)) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array) return -1;\n    else if (Array.isArray(y)) return compareRecord(x, y);\n    else return 1;\n  }\n  else {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array || Array.isArray(y)) return -1;\n    else return compareFields(x, y);\n  }\n}\nfunction compareRecord(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = compare(x[i], y[i]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var p = xKeys.length;\n  var q = yKeys.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    var xKey = xKeys[i];\n    var yKey = yKeys[i];\n    order = compareName(xKey, yKey);\n    if (order === 0) order = compare(x[xKey], y[yKey]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareName(x, y) {\n  var p = x.length;\n  var q = y.length;\n  if (p > 0 && q > 0) {\n    var x0 = x.charCodeAt(0);\n    var y0 = y.charCodeAt(0);\n    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;\n    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;\n    else return x < y ? -1 : x > y ? 1 : 0;\n  }\n  else if (p > 0) return 1;\n  else if (q > 0) return -1;\n  else return 0;\n}\nfunction compareData(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = x[i] - y[i];\n  }\n  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n  else if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.size = size;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.has = has;\nexports.get = get;\nexports.set = set;\nexports.remove = remove;\nexports.keys = keys;\nexports.values = values;\nexports.forEach = forEach;\nexports.concat = concat;\nexports.equal = equal;\nexports.compare = compare;\nexports.uri = uri;\nexports.config = config;\n\n},{\"./config.json\":1}]},{},[])(\"recon-js\")\n});\n\n","'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction size(value) {\n  if (isRecord(value)) return value.length;\n  else if (isObject(value)) return Object.keys(value).length;\n  else return 0;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction has(record, key) {\n  return get(record, key) !== undefined;\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isField(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isField(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isField(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction remove(record, key) {\n  if (isRecord(record)) removeRecord(record, key);\n  else if (isObject(record)) removeObject(record, key);\n}\nfunction removeRecord(record, key) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isField(item)) {\n      if (item[key] !== undefined) {\n        delete item[key];\n        delete record[key];\n        if (Object.keys(item).length === 0) {\n          record.splice(i, 1);\n          i -= 1;\n          n -= 1;\n        }\n      }\n      else if (equal(item.$key, key)) {\n        record.splice(i, 1);\n        i -= 1;\n        n -= 1;\n      }\n    }\n  }\n}\nfunction removeObject(record, key) {\n  if (typeof key === 'string') {\n    delete record[key];\n  }\n}\n\nfunction keys(record) {\n  if (isRecord(record)) {\n    var keys = [];\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        var key = item.$key;\n        if (key !== undefined) keys.push(key);\n        else Array.prototype.push.apply(keys, Object.keys(item));\n      }\n    }\n    return keys;\n  }\n  else if (isObject(record)) {\n    return Object.keys(record);\n  }\n  else {\n    return [];\n  }\n}\n\nfunction values(record) {\n  var values = [];\n  var key;\n  if (isRecord(record)) {\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        key = item.$key;\n        if (key !== undefined) {\n          values.push(item.$value);\n        }\n        else {\n          for (key in item) {\n            values.push(item[key]);\n          }\n        }\n      }\n      else {\n        values.push(item);\n      }\n    }\n  }\n  else if (isObject(record)) {\n    for (key in record) {\n      values.push(record[key]);\n    }\n  }\n  return values;\n}\n\nfunction forEach(record, callback, thisArg) {\n  var key, value;\n  if (isRecord(record)) {\n    for (var i = 0, n = record.length; i < n; i += 1) {\n      var item = record[i];\n      if (isField(item)) {\n        key = item.$key;\n        if (key !== undefined) {\n          value = item.$value;\n          callback.call(thisArg, value, key, record);\n        }\n        else {\n          for (key in item) {\n            value = item[key];\n            callback.call(thisArg, value, key, record);\n          }\n        }\n      }\n      else {\n        callback.call(thisArg, item, undefined, record);\n      }\n    }\n  }\n  else if (isObject(record)) {\n    for (key in record) {\n      value = record[key];\n      callback.call(thisArg, value, key, record);\n    }\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction compare(x, y) {\n  if (x === true) x = 'true';\n  else if (x === false) x = 'false';\n  if (y === true) y = 'true';\n  else if (y === false) y = 'false';\n\n  if (x === undefined) {\n    if (y === undefined) return 0;\n    else return 1;\n  }\n  else if (x === null) {\n    if (y === undefined) return -1;\n    else if (y === null) return 0;\n    else return 1;\n  }\n  else if (typeof x === 'number') {\n    if (y === undefined || y === null) return -1;\n    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (typeof x === 'string') {\n    if (y === undefined || y === null || typeof y === 'number') return -1;\n    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;\n    else return 1;\n  }\n  else if (x instanceof Uint8Array) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;\n    else if (y instanceof Uint8Array) return compareData(x, y);\n    else return 1;\n  }\n  else if (Array.isArray(x)) {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array) return -1;\n    else if (Array.isArray(y)) return compareRecord(x, y);\n    else return 1;\n  }\n  else {\n    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n        y instanceof Uint8Array || Array.isArray(y)) return -1;\n    else return compareFields(x, y);\n  }\n}\nfunction compareRecord(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = compare(x[i], y[i]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var p = xKeys.length;\n  var q = yKeys.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    var xKey = xKeys[i];\n    var yKey = yKeys[i];\n    order = compareName(xKey, yKey);\n    if (order === 0) order = compare(x[xKey], y[yKey]);\n  }\n  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n}\nfunction compareName(x, y) {\n  var p = x.length;\n  var q = y.length;\n  if (p > 0 && q > 0) {\n    var x0 = x.charCodeAt(0);\n    var y0 = y.charCodeAt(0);\n    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;\n    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;\n    else return x < y ? -1 : x > y ? 1 : 0;\n  }\n  else if (p > 0) return 1;\n  else if (q > 0) return -1;\n  else return 0;\n}\nfunction compareData(x, y) {\n  var p = x.length;\n  var q = y.length;\n  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n    order = x[i] - y[i];\n  }\n  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index, more) {\n  this.string = string || '';\n  this.index = index || 0;\n  this.more = more || false;\n}\nStringIterator.prototype.isDone = function () {\n  return this.isEmpty() && !this.more;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\nStringIterator.prototype.dup = function () {\n  return new StringIterator(this.string, this.index, this.more);\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  do next = next.feed(input);\n  while (!input.isEmpty() && next.isCont());\n  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n    next = next.feed(StringIterator.Done);\n  }\n  return next;\n};\nStringIteratee.prototype.state = function () {};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  this.buffer = null;\n  this.offset = 0;\n  this.aliased = true;\n  this.p = 0;\n  this.q = 0;\n  this.r = 0;\n  this.s = 0;\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n  else if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nfunction isUnreservedChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n    c === 95/*'_'*/ || c === 126/*'~'*/);\n}\n\nfunction isSubDelimChar(c) {\n  return (\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 38/*'&'*/ || c === 40/*'('*/ ||\n    c === 41/*')'*/ || c === 42/*'*'*/ ||\n    c === 43/*'+'*/ || c === 44/*','*/ ||\n    c === 59/*';'*/ || c === 61/*'='*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isSchemeChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 46/*'.'*/);\n}\n\nfunction isUserInfoChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/);\n}\n\nfunction isUserChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isHostChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c));\n}\n\nfunction isPathChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 58/*':'*/ || c === 64/*'@'*/);\n}\n\nfunction isQueryChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isParamChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n    c === 40/*'('*/ || c === 41/*')'*/ ||\n    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n    c === 44/*','*/ || c === 47/*'/'*/ ||\n    c === 58/*':'*/ || c === 59/*';'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n    c === 39/*'\\''*/);\n}\n\nfunction isFragmentChar(c) {\n  return (\n    isUnreservedChar(c) ||\n    isSubDelimChar(c) ||\n    c === 47/*'/'*/ || c === 58/*':'*/ ||\n    c === 63/*'?'*/ || c === 64/*'@'*/);\n}\n\nfunction isAlpha(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n}\n\nfunction isDigit(c) {\n  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n}\n\nfunction isHexChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n}\n\nfunction decodeDigit(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n}\n\nfunction decodeHex(c) {\n  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n}\n\nfunction encodeHex(x) {\n  if (x < 10) return 48/*'0'*/ + x;\n  else return 65/*'A'*/ + (x - 10);\n}\n\nfunction toLowerCase(c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n  else return c;\n}\n\n\nfunction UriParser(scheme, authority, path, query, fragment, s) {\n  StringIteratee.call(this);\n  this.scheme = scheme || null;\n  this.authority = authority || null;\n  this.path = path || null;\n  this.query = query || null;\n  this.fragment = fragment || null;\n  this.s = s || 1;\n}\nUriParser.prototype = Object.create(StringIteratee.prototype);\nUriParser.prototype.constructor = UriParser;\nUriParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var fragment = this.fragment;\n  var query = this.query;\n  var path = this.path;\n  var authority = this.authority;\n  var scheme = this.scheme;\n  var uri;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    scheme = scheme || new SchemeParser();\n    scheme = scheme.feed(input);\n    if (scheme.isError()) return scheme;\n    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 47/*'/'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 4) {\n    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n      input.step();\n      s = 5;\n    }\n    else if (!input.isEmpty()) {\n      path = new PathParser(['/']);\n      s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      uri.path = ['/'];\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 5) {\n    authority = authority || new AuthorityParser();\n    authority = authority.feed(input);\n    if (authority.isError()) return authority;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else s = 6;\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority.state()) uri.authority = authority.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 6) {\n    path = path || new PathParser();\n    path = path.feed(input);\n    if (path.isError()) return path;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 63/*'?'*/) {\n        input.step();\n        s = 7;\n      }\n      else if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      uri.path = path.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 7) {\n    query = query || new QueryParser();\n    query = query.feed(input);\n    if (query.isError()) return query;\n    else if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 35/*'#'*/) {\n        input.step();\n        s = 8;\n      }\n      else {\n        uri = {};\n        if (scheme) uri.scheme = scheme.state();\n        if (authority) uri.authority = authority.state();\n        uri.path = path.state();\n        uri.query = query.state();\n        return new StringIteratee.Done(uri);\n      }\n    }\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      uri.query = query.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  if (s === 8) {\n    fragment = fragment || new FragmentParser();\n    fragment = fragment.feed(input);\n    if (fragment.isError()) return fragment;\n    else if (input.isDone()) {\n      uri = {};\n      if (scheme) uri.scheme = scheme.state();\n      if (authority) uri.authority = authority.state();\n      if (path) uri.path = path.state();\n      if (query) uri.query = query.state();\n      uri.fragment = fragment.state();\n      return new StringIteratee.Done(uri);\n    }\n  }\n  return new UriParser(scheme, authority, path, query, fragment, s);\n};\nUriParser.prototype.state = function () {\n  var scheme = this.scheme.state();\n  var authority = this.authority.state();\n  var path = this.path.state();\n  var query = this.query.state();\n  var fragment = this.fragment.state();\n  var uri = {};\n  if (scheme !== undefined) uri.scheme = scheme;\n  if (authority) uri.authority = authority;\n  if (path) uri.path = path;\n  if (query) uri.query = query;\n  if (fragment !== undefined) uri.fragment = fragment;\n  return uri;\n};\n\n\nfunction SchemeParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nSchemeParser.prototype = Object.create(StringIteratee.prototype);\nSchemeParser.prototype.constructor = SchemeParser;\nSchemeParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n      s = 2;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      return new StringIteratee.Error({expected: 'scheme', found: c});\n    }\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  return new SchemeParser(builder, s);\n};\nSchemeParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction AuthorityParser(userInfo, host, port, s) {\n  StringIteratee.call(this);\n  this.userInfo = userInfo || null;\n  this.host = host || null;\n  this.port = port || null;\n  this.s = s || 1;\n}\nAuthorityParser.prototype = Object.create(StringIteratee.prototype);\nAuthorityParser.prototype.constructor = AuthorityParser;\nAuthorityParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var port = this.port;\n  var host = this.host;\n  var userInfo = this.userInfo;\n  var authority, hostinfo, userinfo;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      var look = input.dup();\n      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n      else s = 3;\n    }\n    else if (input.isDone()) s = 3;\n  }\n  if (s === 2) {\n    userInfo = userInfo || new UserInfoParser();\n    userInfo = userInfo.feed(input);\n    if (userInfo.isError()) return userInfo;\n    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 3;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n  }\n  if (s === 3) {\n    host = host || new HostParser();\n    host = host.feed(input);\n    if (host.isError()) return host;\n    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      if (host.state()) {\n        authority = {};\n        hostinfo = host.state();\n        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n        if (userInfo) {\n          userinfo = userInfo.state();\n          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n          else if (userinfo) {\n            authority.username = userinfo.username;\n            authority.password = userinfo.password;\n          }\n        }\n        return new StringIteratee.Done(authority);\n      }\n      else if (userInfo) {\n        authority = {};\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n        return new StringIteratee.Done(authority);\n      }\n      return new StringIteratee.Done(undefined);\n    }\n  }\n  if (s === 4) {\n    port = port || new PortParser();\n    port = port.feed(input);\n    if (port.isError()) return port;\n    else if (!input.isEmpty() || input.isDone()) {\n      authority = {};\n      hostinfo = host.state();\n      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n      authority.port = port.state();\n      if (userInfo) {\n        userinfo = userInfo.state();\n        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n        else if (userinfo) {\n          authority.username = userinfo.username;\n          authority.password = userinfo.password;\n        }\n      }\n      return new StringIteratee.Done(authority);\n    }\n  }\n  return new AuthorityParser(userInfo, host, port, s);\n};\nAuthorityParser.prototype.state = function () {\n  if (this.host && this.host.state()) {\n    var authority = {};\n    var hostinfo = this.host.state();\n    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n    if (this.port) authority.port = this.port.state();\n    if (this.userInfo) {\n      var userinfo = this.userInfo.state();\n      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n      else if (userinfo) {\n        authority.username = userinfo.username;\n        authority.password = userinfo.password;\n      }\n    }\n    return authority;\n  }\n};\n\n\nfunction UserInfoParser(username, password, c1, s) {\n  StringIteratee.call(this);\n  this.username = username || null;\n  this.password = password || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nUserInfoParser.prototype = Object.create(StringIteratee.prototype);\nUserInfoParser.prototype.constructor = UserInfoParser;\nUserInfoParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var password = this.password;\n  var username = this.username;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!username && !input.isEmpty()) username = new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n        input.step();\n        username.append(c);\n      }\n      if (!input.isEmpty() && c === 58/*':'*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(username.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        username.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      password = password || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n        input.step();\n        password.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        var userInfo = {username: username.state(), password: password.state()};\n        return new StringIteratee.Done(userInfo);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        password.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new UserInfoParser(username, password, c1, s);\n};\nUserInfoParser.prototype.state = function () {\n  if (this.password) return {username: this.username.state(), password: this.password.state()};\n  else if (this.username) return this.username.state();\n};\n\n\nfunction HostParser() {\n  StringIteratee.call(this);\n}\nHostParser.prototype = Object.create(StringIteratee.prototype);\nHostParser.prototype.constructor = HostParser;\nHostParser.prototype.feed = function (input) {\n  if (!input.isEmpty()) {\n    var c = input.head();\n    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n    else return new HostAddressParser().feed(input);\n  }\n  return this;\n};\n\n\nfunction HostAddressParser(builder, c1, x, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.x = x || 0;\n  this.s = s || 1;\n}\nHostAddressParser.prototype = Object.create(StringIteratee.prototype);\nHostAddressParser.prototype.constructor = HostAddressParser;\nHostAddressParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var x = this.x;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var host;\n  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n      input.step();\n      builder.append(c);\n      x = 10 * x + decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n        input.step();\n        builder.append(c);\n        x = 0;\n        s += 1;\n      }\n      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        x = 0;\n        s = 5;\n      }\n    }\n    else if (input.isDone()) {\n      if (s === 4 && x <= 255) {\n        host = {ipv4: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n      else {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 5) {\n      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n        input.step();\n        builder.append(toLowerCase(c));\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 6;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        host = {name: builder.state()};\n        return new StringIteratee.Done(host);\n      }\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 7;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 7) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 5;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new HostAddressParser(builder, c1, x, s);\n};\nHostAddressParser.prototype.state = function () {\n  if (this.builder) {\n    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n    else return {name: this.builder.state()};\n  }\n};\n\n\nfunction HostLiteralParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\nHostLiteralParser.prototype.constructor = HostLiteralParser;\nHostLiteralParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    builder = builder || new StringBuilder();\n    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n      input.step();\n      builder.append(toLowerCase(c));\n    }\n    if (!input.isEmpty() && c === 93/*']'*/) {\n      input.step();\n      var host = {ipv6: builder.state()};\n      return new StringIteratee.Done(host);\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new HostLiteralParser(builder, s);\n};\nHostLiteralParser.prototype.state = function () {\n  if (this.builder) return {ipv6: this.builder.state()};\n};\n\n\nfunction PortParser(port) {\n  StringIteratee.call(this);\n  this.port = port || 0;\n}\nPortParser.prototype = Object.create(StringIteratee.prototype);\nPortParser.prototype.constructor = PortParser;\nPortParser.prototype.feed = function (input) {\n  var c = 0;\n  var port = this.port;\n  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n    input.step();\n    port = 10 * port + decodeDigit(c);\n  }\n  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n  return new PortParser(port);\n};\nPortParser.prototype.state = function () {\n  if (this.port !== 0) return this.port;\n};\n\n\nfunction PathParser(path, builder, c1, s) {\n  StringIteratee.call(this);\n  this.path = path || null;\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nPathParser.prototype = Object.create(StringIteratee.prototype);\nPathParser.prototype.constructor = PathParser;\nPathParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder;\n  var path = this.path;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 47/*'/'*/) {\n        input.step();\n        path = path || [];\n        if (builder) {\n          path.push(builder.state());\n          builder = null;\n        }\n        path.push('/');\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        path = path || [];\n        if (builder) path.push(builder.state());\n        return new StringIteratee.Done(path);\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        builder = builder || new StringBuilder();\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new PathParser(path, builder, c1, s);\n};\nPathParser.prototype.state = function () {\n  if (this.path) return this.path;\n  else return [];\n};\n\n\nfunction QueryParser(key, value, query, c1, s) {\n  StringIteratee.call(this);\n  this.key = key || null;\n  this.value = value || null;\n  this.query = query || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nQueryParser.prototype = Object.create(StringIteratee.prototype);\nQueryParser.prototype.constructor = QueryParser;\nQueryParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var query = this.query;\n  var value = this.value;\n  var key = this.key;\n  var k, v, param;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      key = key || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n        input.step();\n        key.append(c);\n      }\n      if (!input.isEmpty() && c === 61/*'='*/) {\n        input.step();\n        s = 4;\n      }\n      else if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        query = query || [];\n        query.push(key.state());\n        key = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        if (!query) return new StringIteratee.Done(key.state());\n        else {\n          query.push(key.state());\n          return new StringIteratee.Done(query);\n        }\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        key.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      value = value || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n        input.step();\n        value.append(c);\n      }\n      if (!input.isEmpty() && c === 38/*'&'*/) {\n        input.step();\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        key = null;\n        value = null;\n        s = 1;\n      }\n      else if (!input.isEmpty() && c === 38/*'%'*/) {\n        input.step();\n        s = 5;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        k = key.state();\n        v = value.state();\n        param = {};\n        param[k] = v;\n        query = query || [];\n        query.push(param);\n        query[k] = v;\n        return new StringIteratee.Done(query);\n      }\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        value.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new QueryParser(key, value, query, c1, s);\n};\nQueryParser.prototype.state = function () {\n  if (this.query) return this.query;\n};\n\n\nfunction FragmentParser(builder, c1, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.c1 = c1 || 0;\n  this.s = s || 1;\n}\nFragmentParser.prototype = Object.create(StringIteratee.prototype);\nFragmentParser.prototype.constructor = FragmentParser;\nFragmentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var c1 = this.c1;\n  var builder = this.builder || new StringBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n        input.step();\n        builder.append(c);\n      }\n      if (!input.isEmpty() && c === 37/*'%'*/) {\n        input.step();\n        s = 2;\n      }\n      else if (!input.isEmpty() || input.isDone()) {\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        c1 = c;\n        s = 3;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n        input.step();\n        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n        c1 = 0;\n        s = 1;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new FragmentParser(builder, c1, s);\n};\nFragmentParser.prototype.state = function () {\n  if (this.builder) return this.builder.state();\n};\n\n\nfunction parseUri(string) {\n  var input = new StringIterator(string);\n  var result = new UriParser().run(input);\n  return result.state();\n}\nfunction parseAuthority(string) {\n  var input = new StringIterator(string);\n  var result = new AuthorityParser().run(input);\n  return result.state();\n}\nfunction parsePath(string) {\n  var input = new StringIterator(string);\n  var result = new PathParser().run(input);\n  return result.state();\n}\nfunction stringifyUri(uri) {\n  var writer = new UriWriter();\n  writer.writeUri(uri);\n  return writer.state();\n}\nfunction resolveUri(base, relative) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof relative === 'string') relative = parseUri(relative);\n  var absolute = {};\n  if (relative.scheme) {\n    absolute.scheme = relative.scheme;\n    if (relative.authority) absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.authority) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    absolute.authority = relative.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (!relative.path || !relative.path.length) {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (base.path) absolute.path = base.path;\n    if (relative.query !== undefined) absolute.query = relative.query;\n    else if (base.query !== undefined) absolute.query = base.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else if (relative.path[0] === '/') {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    if (relative.path) absolute.path = removeDotSegments(relative.path);\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  else {\n    if (base.scheme) absolute.scheme = base.scheme;\n    if (base.authority) absolute.authority = base.authority;\n    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n    if (relative.query !== undefined) absolute.query = relative.query;\n    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n  }\n  return absolute;\n}\nfunction mergeUriPath(base, relativePath) {\n  if (base.authority && (!base.path || !base.path.length)) {\n    var segments = relativePath.slice();\n    segments.unshift('/');\n    return segments;\n  }\n  else if (!base.path || !base.path.length) return relativePath;\n  else return mergePath(base.path.slice(), relativePath);\n}\nfunction mergePath(basePath, relativePath) {\n  var segments = [];\n  var head = basePath.shift();\n  while (basePath.length > 0) {\n    segments.push(head);\n    head = basePath.shift();\n  }\n  if (head === '/') segments.push(head);\n  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n    segments.push(relativePath[i]);\n  }\n  return segments;\n}\nfunction removeDotSegments(path) {\n  var segments = [];\n  while (path.length > 0) {\n    var head = path[0];\n    if (head === '.' || head === '..') {\n      path = path.slice(path.length > 1 ? 2 : 1);\n    }\n    else if (head === '/') {\n      if (path.length > 1) {\n        var next = path[1];\n        if (next === '.') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n        }\n        else if (next === '..') {\n          path = path.length > 2 ? path.slice(2) : ['/'];\n          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n            segments = segments.slice(0, segments.length - 2);\n          }\n          else if (segments.length > 0) {\n            segments = segments.slice(0, segments.length - 1);\n          }\n        }\n        else {\n          segments.push(head);\n          segments.push(next);\n          path = path.slice(2);\n        }\n      }\n      else {\n        segments.push('/');\n        path.shift();\n      }\n    }\n    else {\n      segments.push(head);\n      path.shift();\n    }\n  }\n  return segments;\n}\nfunction unresolveUri(base, absolute) {\n  if (typeof base === 'string') base = parseUri(base);\n  if (typeof absolute === 'string') absolute = parseUri(absolute);\n  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n  var relative = {};\n  var basePath = base.path;\n  if (typeof basePath === 'string') basePath = parsePath(basePath);\n  else if (!basePath) basePath = [];\n  else basePath = basePath.slice();\n  var absolutePath = absolute.path;\n  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n  else if (!absolutePath) absolutePath = [];\n  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n  if (relativePath.length > 0) relative.path = relativePath;\n  if (absolute.query !== undefined) relative.query = absolute.query;\n  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n  return relative;\n}\nfunction unmergePath(basePath, relativePath, absolutePath) {\n  if (basePath.length === 0) {\n    if (relativePath.length > 1) relativePath.shift();\n    return relativePath;\n  }\n  else if (basePath[0] !== '/') {\n    return relativePath;\n  }\n  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n    relativePath.unshift('/');\n    return relativePath;\n  }\n  else {\n    basePath.shift();\n    relativePath.shift();\n    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n      return relativePath;\n    }\n    else {\n      basePath.shift();\n      relativePath.shift();\n      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n      else return unmergePath(basePath, relativePath, absolutePath);\n    }\n  }\n}\n\nfunction UriWriter(builder) {\n  this.builder = builder || new StringBuilder();\n}\nUriWriter.prototype.writeUri = function (uri) {\n  if (uri.scheme) {\n    this.writeScheme(uri.scheme);\n    this.builder.append(58/*':'*/);\n  }\n  if (uri.authority) {\n    this.builder.append(47/*'/'*/);\n    this.builder.append(47/*'/'*/);\n    this.writeAuthority(uri.authority);\n  }\n  if (uri.path) {\n    this.writePath(uri.path);\n  }\n  if (uri.query !== undefined) {\n    this.builder.append(63/*'?'*/);\n    this.writeQuery(uri.query);\n  }\n  if (uri.fragment !== undefined) {\n    this.builder.append(35/*'#'*/);\n    this.writeFragment(uri.fragment);\n  }\n};\nUriWriter.prototype.writeScheme = function (scheme) {\n  var cs = new StringIterator(scheme);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isSchemeChar(c)) this.builder.append(c);\n    else throw 'Invalid URI scheme: ' + scheme;\n    cs.step();\n  }\n};\nUriWriter.prototype.writeAuthority = function (authority) {\n  if (typeof authority === 'string') authority = parseAuthority(authority);\n  if (authority.userInfo !== undefined) {\n    this.writeUserInfo(authority.userInfo);\n    this.builder.append(64/*'@'*/);\n  }\n  else if (authority.username !== undefined && authority.password !== undefined) {\n    this.writeUser(authority.username);\n    this.builder.append(58/*':'*/);\n    this.writeUserInfo(authority.password);\n    this.builder.append(64/*'@'*/);\n  }\n  if (authority.host !== undefined) {\n    this.writeHost(authority.host);\n  }\n  else if (authority.ipv4 !== undefined) {\n    this.writeHost(authority.ipv4);\n  }\n  else if (authority.ipv6 !== undefined) {\n    this.builder.append(91/*'['*/);\n    this.writeHostLiteral(authority.ipv6);\n    this.builder.append(93/*']'*/);\n  }\n  if (authority.port) {\n    this.builder.append(58/*':'*/);\n    this.writePort(authority.port);\n  }\n};\nUriWriter.prototype.writeUserInfo = function (userInfo) {\n  var cs = new StringIterator(userInfo);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserInfoChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeUser = function (user) {\n  var cs = new StringIterator(user);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isUserChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHost = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeHostLiteral = function (host) {\n  var cs = new StringIterator(host);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writePort = function (port) {\n  var i = 9;\n  var digits = new Array(10);\n  while (port > 0) {\n    digits[i] = port % 10;\n    port = Math.floor(port / 10);\n    i -= 1;\n  }\n  i += 1;\n  while (i < 10) {\n    this.builder.append(48/*'0'*/ + digits[i]);\n    i += 1;\n  }\n};\nUriWriter.prototype.writePath = function (path) {\n  if (typeof path === 'string') path = parsePath(path);\n  for (var i = 0, n = path.length; i < n; i += 1) {\n    var segment = path[i];\n    if (segment === '/') this.builder.append(47/*'/'*/);\n    else this.writePathSegment(segment);\n  }\n};\nUriWriter.prototype.writePathSegment = function (segment) {\n  var cs = new StringIterator(segment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isPathChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQuery = function (query) {\n  if (typeof query === 'string') this.writeQueryPart(query);\n  else if (Array.isArray(query)) this.writeQueryArray(query);\n  else if (query) this.writeQueryParams(query);\n};\nUriWriter.prototype.writeQueryArray = function (query) {\n  for (var i = 0, n = query.length; i < n; i += 1) {\n    var param = query[i];\n    if (typeof param === 'string') {\n      if (i > 0) this.builder.append(38/*'&'*/);\n      this.writeQueryParam(param);\n    }\n    else this.writeQueryParams(param, i);\n  }\n};\nUriWriter.prototype.writeQueryParams = function (params, i) {\n  var keys = Object.keys(params);\n  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n    var key = keys[j];\n    var value = params[key];\n    if (i > 0) this.builder.append(38/*'&'*/);\n    this.writeQueryParam(key);\n    this.builder.append(61/*'='*/);\n    this.writeQueryParam(value);\n  }\n};\nUriWriter.prototype.writeQueryParam = function (param) {\n  var cs = new StringIterator(param);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isParamChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeQueryPart = function (query) {\n  var cs = new StringIterator(query);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isQueryChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeFragment = function (fragment) {\n  var cs = new StringIterator(fragment);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    if (isFragmentChar(c)) this.builder.append(c);\n    else this.writeEncoded(c);\n    cs.step();\n  }\n};\nUriWriter.prototype.writeEncoded = function (c) {\n  if (c === 0x00) { // modified UTF-8\n    this.writePctEncoded(0xC0);\n    this.writePctEncoded(0x80);\n  }\n  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n    this.writePctEncoded(c);\n  }\n  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n    this.writePctEncoded(0xC0 | (c >>> 6));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n    this.writePctEncoded(0xE0 | (c >>> 12));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    this.writePctEncoded(0xF0 | (c >>> 18));\n    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n    this.writePctEncoded(0x80 | (c & 0x3F));\n  }\n  else { // surrogate or invalid code point\n    this.writePctEncoded(0xEF);\n    this.writePctEncoded(0xBF);\n    this.writePctEncoded(0xBD);\n  }\n};\nUriWriter.prototype.writePctEncoded = function (c) {\n  this.builder.append(37/*'%'*/);\n  this.builder.append(encodeHex(c >>> 4 & 0xF));\n  this.builder.append(encodeHex(c & 0xF));\n};\nUriWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\nvar uri = {};\nuri.parse = parseUri;\nuri.stringify = stringifyUri;\nuri.resolve = resolveUri;\nuri.unresolve = unresolveUri;\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.size = size;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.has = has;\nexports.get = get;\nexports.set = set;\nexports.remove = remove;\nexports.keys = keys;\nexports.values = values;\nexports.forEach = forEach;\nexports.concat = concat;\nexports.equal = equal;\nexports.compare = compare;\nexports.uri = uri;\nexports.config = config;\n"],"sourceRoot":"/source/"}