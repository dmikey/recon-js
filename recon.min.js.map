{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","recon.min.js","recon.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","recon","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","recon-js","parse","string","input","StringIterator","result","DocumentParser","run","state","stringify","value","options","writer","ReconWriter","block","writeValue","writeBlock","base64","undefined","Uint8Array","data","DataBuilder","cs","isEmpty","appendBase64Char","head","step","isRecord","item","Array","isArray","isObject","isField","isAttr","keys","Object","key","charCodeAt","isBlockSafe","record","isMarkupSafe","coerce","arguments","coerceValue","coerceRecord","coerceObject","items","push","isNaN","parseInt","set","fields","field","defineProperty","enumerable","configurable","writable","concat","x","y","builder","RecordBuilder","appendRecord","appendFields","appendItem","equal","equalRecord","equalFields","equalData","xKeys","yKeys","get","$key","$value","setRecord","setObject","updated","ValueBuilder","index","StringIteratee","StringBuilder","isSpace","c","isNewline","isWhitespace","isNameStartChar","isNameChar","isBase64Char","BlockParser","AttrParser","ident","BlockValueParser","InlineValueParser","RecordParser","MarkupParser","text","IdentParser","StringParser","NumberParser","DataParser","config","prototype","appendValue","appendField","isDone","c1","c2","Done","create","isCont","isError","feed","next","constructor","error","unexpectedEOF","append","String","fromCharCode","appendString","prepare","size","expand","base","Math","max","aliased","buffer","array","appendByte","offset","decodeBase64Digit","decodeBase64Quantum","p","q","z","w","subarray","found","expected","Number","writeRecord","writeText","writeNumber","writeBool","writeData","writeItem","writeSlots","writeAttrs","attrs","writeAttr","substring","writeIdent","slots","writeSlot","writeItems","inBlock","inMarkup","inBraces","inBrackets","first","writeMarkupText","isIdent","writeString","number","toString","bool","encodeBase64Digit","apply","./config.json"],"mappings":"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","file":"recon.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.3.1\"}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.recon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.3.1\"}\n},{}],\"recon-js\":[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index) {\n  Object.defineProperty(this, 'string', {value: string || ''});\n  Object.defineProperty(this, 'index', {value: index || 0, writable: true});\n}\nStringIterator.prototype.isDone = function () {\n  return false;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  while (!input.isEmpty() && next.isCont()) next = next.feed(input);\n  if (input.isEmpty() && !input.isDone() && next.isCont()) next = next.feed(StringIterator.Done);\n  return next;\n};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  Object.defineProperty(this, 'buffer', {value: null, writable: true});\n  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n  Object.defineProperty(this, 'aliased', {value: true, writable: true});\n  Object.defineProperty(this, 'p', {value: 0, writable: true});\n  Object.defineProperty(this, 'q', {value: 0, writable: true});\n  Object.defineProperty(this, 'r', {value: 0, writable: true});\n  Object.defineProperty(this, 's', {value: 0, writable: true});\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  Object.defineProperty(this, 'builder', {value: builder || new StringBuilder()});\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.config = config;\n\n},{\"./config.json\":1}]},{},[\"recon-js\"])(\"recon-js\")\n});\n\n","'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index) {\n  Object.defineProperty(this, 'string', {value: string || ''});\n  Object.defineProperty(this, 'index', {value: index || 0, writable: true});\n}\nStringIterator.prototype.isDone = function () {\n  return false;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  while (!input.isEmpty() && next.isCont()) next = next.feed(input);\n  if (input.isEmpty() && !input.isDone() && next.isCont()) next = next.feed(StringIterator.Done);\n  return next;\n};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  Object.defineProperty(this, 'buffer', {value: null, writable: true});\n  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n  Object.defineProperty(this, 'aliased', {value: true, writable: true});\n  Object.defineProperty(this, 'p', {value: 0, writable: true});\n  Object.defineProperty(this, 'q', {value: 0, writable: true});\n  Object.defineProperty(this, 'r', {value: 0, writable: true});\n  Object.defineProperty(this, 's', {value: 0, writable: true});\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  Object.defineProperty(this, 'builder', {value: builder || new StringBuilder()});\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.config = config;\n"],"sourceRoot":"/source/"}