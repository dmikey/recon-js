{"version":3,"sources":["node_modules/browser-pack/_prelude.js","config.json","recon.min.js","recon.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","recon","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","recon-js","parse","string","input","StringIterator","result","DocumentParser","run","state","stringify","value","options","writer","ReconWriter","block","writeValue","writeBlock","base64","undefined","Uint8Array","data","DataBuilder","cs","isEmpty","appendBase64Char","head","step","isRecord","item","Array","isArray","isObject","isField","isAttr","keys","Object","key","charCodeAt","isBlockSafe","record","isMarkupSafe","header","$key","$value","tail","builder","RecordBuilder","appendItem","appendField","tag","get","equal","set","setRecord","setObject","field","updated","push","defineProperty","enumerable","configurable","writable","concat","x","y","appendRecord","appendFields","equalRecord","equalFields","equalData","xKeys","yKeys","coerce","arguments","coerceValue","coerceRecord","coerceObject","items","isNaN","parseInt","fields","ValueBuilder","index","StringIteratee","StringBuilder","isSpace","c","isNewline","isWhitespace","isNameStartChar","isNameChar","isBase64Char","BlockParser","AttrParser","ident","BlockValueParser","InlineValueParser","RecordParser","MarkupParser","text","IdentParser","StringParser","NumberParser","DataParser","config","prototype","appendValue","isDone","c1","c2","Done","create","isCont","isError","feed","next","constructor","error","unexpectedEOF","append","String","fromCharCode","appendString","prepare","size","expand","base","Math","max","aliased","buffer","array","appendByte","offset","decodeBase64Digit","decodeBase64Quantum","p","q","z","w","subarray","found","expected","Number","writeRecord","writeText","writeNumber","writeBool","writeData","writeItem","writeSlots","writeAttrs","attrs","writeAttr","substring","writeIdent","slots","writeSlot","writeItems","inBlock","inMarkup","inBraces","inBrackets","first","writeMarkupText","isIdent","writeString","number","toString","bool","encodeBase64Digit","apply","./config.json"],"mappings":"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","file":"recon.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\"version\":\"0.3.2\"}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.recon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\"version\":\"0.3.2\"}\n},{}],\"recon-js\":[function(require,module,exports){\n'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index) {\n  Object.defineProperty(this, 'string', {value: string || ''});\n  Object.defineProperty(this, 'index', {value: index || 0, writable: true});\n}\nStringIterator.prototype.isDone = function () {\n  return false;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  while (!input.isEmpty() && next.isCont()) next = next.feed(input);\n  if (input.isEmpty() && !input.isDone() && next.isCont()) next = next.feed(StringIterator.Done);\n  return next;\n};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  Object.defineProperty(this, 'buffer', {value: null, writable: true});\n  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n  Object.defineProperty(this, 'aliased', {value: true, writable: true});\n  Object.defineProperty(this, 'p', {value: 0, writable: true});\n  Object.defineProperty(this, 'q', {value: 0, writable: true});\n  Object.defineProperty(this, 'r', {value: 0, writable: true});\n  Object.defineProperty(this, 's', {value: 0, writable: true});\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  Object.defineProperty(this, 'builder', {value: builder || new StringBuilder()});\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.config = config;\n\n},{\"./config.json\":1}]},{},[])(\"recon-js\")\n});\n\n","'use strict';\n\nvar config = require('./config.json');\n\nfunction parse(string) {\n  var input = new StringIterator(string);\n  var result = new DocumentParser().run(input);\n  return result.state();\n}\n\nfunction stringify(value, options) {\n  var writer = new ReconWriter();\n  if (options && options.block === false) writer.writeValue(value);\n  else writer.writeBlock(value);\n  return writer.state();\n}\n\nfunction base64(string) {\n  if (string === undefined) return new Uint8Array(0);\n  var data = new DataBuilder();\n  var cs = new StringIterator(string);\n  while (!cs.isEmpty()) {\n    data.appendBase64Char(cs.head());\n    cs.step();\n  }\n  return data.state();\n}\n\nfunction isRecord(item) {\n  return Array.isArray(item);\n}\n\nfunction isObject(item) {\n  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n}\n\nfunction isField(item) {\n  return item !== null && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction isAttr(item) {\n  if (!isField(item)) return false;\n  var keys = Object.keys(item);\n  var n = keys.length;\n  if (n === 0) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n  }\n  return true;\n}\n\nfunction isBlockSafe(record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction isMarkupSafe(record) {\n  var n = record.length;\n  if (n === 0 || !isAttr(record[0])) return false;\n  for (var i = 1; i < n; i += 1) {\n    if (isAttr(record[i])) return false;\n  }\n  return true;\n}\n\nfunction head(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) {\n      if (header.$key) return header.$value;\n      else return header[Object.keys(header)[0]];\n    }\n    else return header;\n  }\n  else if (isObject(value)) return value[Object.keys(value)[0]];\n  else return value;\n}\n\nfunction tail(value) {\n  var i, n, builder;\n  if (isRecord(value)) {\n    builder = new RecordBuilder();\n    for (i = 1, n = value.length; i < n; i += 1) {\n      builder.appendItem(value[i]);\n    }\n    return builder.state();\n  }\n  else if (isObject(value)) {\n    var keys = Object.keys(value);\n    for (i = 1, n = keys.length; i < n; i += 1) {\n      var key = keys[i];\n      builder.appendField(key, value[key]);\n    }\n    return builder.state();\n  }\n}\n\nfunction tag(value) {\n  if (isRecord(value)) {\n    var header = value[0];\n    if (isField(header)) return header.$key || Object.keys(header)[0];\n  }\n  else if (isObject(value)) return Object.keys(value)[0];\n}\n\nfunction get(record, key) {\n  var i, n, item, value;\n  if (typeof key === 'string') {\n    value = record[key];\n    if (value !== undefined) return value;\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (item[key] !== undefined) return item[key];\n        else if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n  else {\n    for (i = 0, n = record.length; i < n; i += 1) {\n      item = record[i];\n      if (isObject(item)) {\n        if (equal(item.$key, key)) return item.$value;\n      }\n    }\n  }\n}\n\nfunction set(record, key, value) {\n  if (isRecord(record)) setRecord(record, key, value);\n  else if (isObject(record)) setObject(record, key, value);\n}\nfunction setRecord(record, key, value) {\n  var updated = false;\n  var field;\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    var item = record[i];\n    if (isObject(item)) {\n      if (item[key] !== undefined) {\n        item[key] = value;\n        updated = true;\n      }\n      else if (equal(item.$key, key)) {\n        item.$value = value;\n        updated = true;\n      }\n    }\n  }\n  if (typeof key === 'string') {\n    if (!updated) {\n      field = {};\n      field[key] = value;\n      record.push(field);\n    }\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else if (!updated) {\n    field = {};\n    field.$key = key;\n    field.$value = value;\n    record.push(field);\n  }\n}\nfunction setObject(record, key, value) {\n  if (typeof key === 'string') {\n    record[key] = value;\n  }\n}\n\nfunction concat(x, y) {\n  var builder = new RecordBuilder();\n  if (isRecord(x)) builder.appendRecord(x);\n  else if (isObject(x)) builder.appendFields(x);\n  else if (x !== undefined) builder.appendItem(x);\n  if (isRecord(y)) builder.appendRecord(y);\n  else if (isObject(y)) builder.appendFields(y);\n  else if (y !== undefined) builder.appendItem(y);\n  return builder.state();\n}\n\nfunction equal(x, y) {\n  if (x === y) return true;\n  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n  if (isField(x) && isField(y)) return equalFields(x, y);\n  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n  return false;\n}\nfunction equalRecord(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (!equal(x[i], y[i])) return false;\n  }\n  return true;\n}\nfunction equalFields(x, y) {\n  var xKeys = Object.keys(x);\n  var yKeys = Object.keys(y);\n  var n = xKeys.length;\n  if (n !== yKeys.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    var key = xKeys[i];\n    if (!equal(x[key], y[key])) return false;\n  }\n  return true;\n}\nfunction equalData(x, y) {\n  var n = x.length;\n  if (n !== y.length) return false;\n  for (var i = 0; i < n; i += 1) {\n    if (x[i] !== y[i]) return false;\n  }\n  return true;\n}\n\nfunction coerce() {\n  if (arguments.length === 1) return coerceValue(arguments[0]);\n  else if (arguments.length > 1) return coerceRecord(arguments);\n}\nfunction coerceValue(value) {\n  if (isRecord(value)) return coerceRecord(value);\n  else if (isObject(value)) return coerceObject(value);\n  else return value;\n}\nfunction coerceRecord(items) {\n  var record = [];\n  var i, n;\n  for (i = 0, n = items.length; i < n; i += 1) {\n    record.push(items[i]);\n  }\n  var keys = Object.keys(items);\n  for (i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (isNaN(parseInt(key))) {\n      var value = record[key];\n      set(record, key, value);\n    }\n  }\n  return record;\n}\nfunction coerceObject(fields) {\n  var keys = Object.keys(fields);\n  var n = keys.length;\n  var record = new Array(n);\n  for (var i = 0; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    var field = {};\n    field[key] = value;\n    record[i] = field;\n    Object.defineProperty(record, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  return record;\n}\n\n\nfunction RecordBuilder() {\n  this.items = [];\n}\nRecordBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendFields(item);\n  else this.appendValue(item);\n};\nRecordBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nRecordBuilder.prototype.appendField = function (key, value) {\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nRecordBuilder.prototype.appendValue = function (value) {\n  this.items.push(value);\n};\nRecordBuilder.prototype.appendRecord = function (record) {\n  for (var i = 0, n = record.length; i < n; i += 1) {\n    this.appendItem(record[i]);\n  }\n};\nRecordBuilder.prototype.state = function () {\n  return this.items;\n};\n\n\nfunction ValueBuilder() {\n  this.items = null;\n  this.value = null;\n}\nValueBuilder.prototype.appendItem = function (item) {\n  if (isField(item)) this.appendField(item);\n  else this.appendValue(item);\n};\nValueBuilder.prototype.appendFields = function (fields) {\n  var keys = Object.keys(fields);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    var value = fields[key];\n    this.appendField(key, value);\n  }\n};\nValueBuilder.prototype.appendField = function (key, value) {\n  if (this.items === null) {\n    this.items = [];\n    if (this.value !== null) {\n      this.items.push(this.value);\n      this.value = null;\n    }\n  }\n  var field = {};\n  if (typeof key === 'string') {\n    field[key] = value;\n    this.items.push(field);\n    Object.defineProperty(this.items, key, {\n      value: value,\n      enumerable: false,\n      configurable: true,\n      writable: true});\n  }\n  else {\n    field.$key = key;\n    field.$value = value;\n    this.items.push(field);\n  }\n};\nValueBuilder.prototype.appendValue = function (value) {\n  if (this.items !== null) this.items.push(value);\n  else if (this.value === null) this.value = value;\n  else {\n    this.items = [];\n    this.items.push(this.value);\n    this.value = null;\n    this.items.push(value);\n  }\n};\nValueBuilder.prototype.state = function () {\n  if (this.value !== null) return this.value;\n  else if (this.items !== null) return this.items;\n};\n\n\nfunction StringIterator(string, index) {\n  Object.defineProperty(this, 'string', {value: string || ''});\n  Object.defineProperty(this, 'index', {value: index || 0, writable: true});\n}\nStringIterator.prototype.isDone = function () {\n  return false;\n};\nStringIterator.prototype.isEmpty = function () {\n  return this.index >= this.string.length;\n};\nStringIterator.prototype.head = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n    else return 0xFFFD;\n  }\n  else return 0xFFFD;\n};\nStringIterator.prototype.step = function () {\n  var c1 = this.string.charCodeAt(this.index);\n  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n    this.index += 1;\n  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n    var c2 = this.string.charCodeAt(this.index + 1);\n    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n      this.index += 2;\n    else this.index += 1;\n  }\n  else this.index += 1;\n};\n\nStringIterator.Done = {\n  isDone: function () {\n    return true;\n  },\n  isEmpty: function () {\n    return true;\n  },\n  head: function () {\n    throw 'head of empty iterator';\n  },\n  step: function () {\n    throw 'empty iterator step';\n  }\n};\nStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\nfunction StringIteratee() {}\nStringIteratee.prototype.isCont = function () {\n  return true;\n};\nStringIteratee.prototype.isDone = function () {\n  return false;\n};\nStringIteratee.prototype.isError = function () {\n  return false;\n};\nStringIteratee.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.prototype.run = function (input) {\n  var next = this;\n  while (!input.isEmpty() && next.isCont()) next = next.feed(input);\n  if (input.isEmpty() && !input.isDone() && next.isCont()) next = next.feed(StringIterator.Done);\n  return next;\n};\n\nStringIteratee.Done = function (value) {\n  StringIteratee.call(this);\n  this.value = value;\n};\nStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Done.prototype.constructor = StringIteratee.Done;\nStringIteratee.Done.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Done.prototype.isDone = function () {\n  return true;\n};\nStringIteratee.Done.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Done.prototype.state = function () {\n  return this.value;\n};\n\nStringIteratee.Error = function (error) {\n  StringIteratee.call(this);\n  this.error = error;\n};\nStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\nStringIteratee.Error.prototype.constructor = StringIteratee.Error;\nStringIteratee.Error.prototype.isCont = function () {\n  return false;\n};\nStringIteratee.Error.prototype.isError = function () {\n  return true;\n};\nStringIteratee.Error.prototype.feed = function (input) {\n  return this;\n};\nStringIteratee.Error.prototype.state = function () {\n  throw this.error;\n};\n\nStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\nfunction StringBuilder(s) {\n  this.string = s || '';\n}\nStringBuilder.prototype.append = function (c) {\n  if ((c >= 0x0000 && c <= 0xD7FF) ||\n      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n    this.string += String.fromCharCode(c);\n  }\n  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n    var u = c - 0x10000;\n    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n  }\n  else { // invalid code point\n    this.string += String.fromCharCode(0xFFFD);\n  }\n};\nStringBuilder.prototype.appendString = function (s) {\n  var cs = new StringIterator(s);\n  while (!cs.isEmpty()) {\n    this.append(cs.head());\n    cs.step();\n  }\n};\nStringBuilder.prototype.state = function () {\n  return this.string;\n};\n\n\nfunction DataBuilder() {\n  Object.defineProperty(this, 'buffer', {value: null, writable: true});\n  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n  Object.defineProperty(this, 'aliased', {value: true, writable: true});\n  Object.defineProperty(this, 'p', {value: 0, writable: true});\n  Object.defineProperty(this, 'q', {value: 0, writable: true});\n  Object.defineProperty(this, 'r', {value: 0, writable: true});\n  Object.defineProperty(this, 's', {value: 0, writable: true});\n}\nDataBuilder.prototype.prepare = function (size) {\n  function expand(base, size) {\n    var n = Math.max(base, size) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n    return n + 1;\n  }\n  if (this.aliased || size > this.buffer.length) {\n    var array = new Uint8Array(expand(256, size));\n    if (this.buffer) array.set(this.buffer);\n    this.buffer = array;\n    this.aliased = false;\n  }\n};\nDataBuilder.prototype.appendByte = function (value) {\n  this.prepare(this.offset + 1);\n  this.buffer[this.offset] = value;\n  this.offset += 1;\n};\nDataBuilder.prototype.decodeBase64Digit = function (c) {\n  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n};\nDataBuilder.prototype.decodeBase64Quantum = function () {\n  var x = this.decodeBase64Digit(this.p);\n  var y = this.decodeBase64Digit(this.q);\n  if (this.r !== 61/*'='*/) {\n    var z = this.decodeBase64Digit(this.r);\n    if (this.s !== 61/*'='*/) {\n      var w = this.decodeBase64Digit(this.s);\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n      this.appendByte((z << 6) | w);\n    }\n    else {\n      this.appendByte((x << 2) | (y >>> 4));\n      this.appendByte((y << 4) | (z >>> 2));\n    }\n  }\n  else {\n    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n    this.appendByte((x << 2) | (y >>> 4));\n  }\n};\nDataBuilder.prototype.appendBase64Char = function (c) {\n  if (this.p === 0) this.p = c;\n  else if (this.q === 0) this.q = c;\n  else if (this.r === 0) this.r = c;\n  else {\n    this.s = c;\n    this.decodeBase64Quantum();\n    this.s = 0;\n    this.r = 0;\n    this.q = 0;\n    this.p = 0;\n  }\n};\nDataBuilder.prototype.state = function (value) {\n  if (!this.buffer) this.buffer = new Uint8Array(0);\n  else if (this.buffer.length !== this.offset) {\n    var array = new Uint8Array(this.offset);\n    array.set(this.buffer.subarray(0, this.offset));\n    this.buffer = array;\n  }\n  this.aliased = true;\n  return this.buffer;\n};\n\n\nfunction isSpace(c) {\n  return c === 0x20 || c === 0x9;\n}\nfunction isNewline(c) {\n  return c === 0xA || c === 0xD;\n}\nfunction isWhitespace(c) {\n  return isSpace(c) || isNewline(c);\n}\nfunction isNameStartChar(c) {\n  return (\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x2FF ||\n    c >= 0x370 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isNameChar(c) {\n  return (\n    c === 45/*'-'*/ ||\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c === 95/*'_'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 0xB7 ||\n    c >= 0xC0 && c <= 0xD6 ||\n    c >= 0xD8 && c <= 0xF6 ||\n    c >= 0xF8 && c <= 0x37D ||\n    c >= 0x37F && c <= 0x1FFF ||\n    c >= 0x200C && c <= 0x200D ||\n    c >= 0x203F && c <= 0x2040 ||\n    c >= 0x2070 && c <= 0x218F ||\n    c >= 0x2C00 && c <= 0x2FEF ||\n    c >= 0x3001 && c <= 0xD7FF ||\n    c >= 0xF900 && c <= 0xFDCF ||\n    c >= 0xFDF0 && c <= 0xFFFD ||\n    c >= 0x10000 && c <= 0xEFFFF);\n}\nfunction isBase64Char(c) {\n  return (\n    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n    c === 47/*'/'*/ || c === 95/*'_'*/);\n}\n\n\nfunction DocumentParser(value) {\n  StringIteratee.call(this);\n  this.value = value || new BlockParser();\n}\nDocumentParser.prototype = Object.create(StringIteratee.prototype);\nDocumentParser.prototype.constructor = DocumentParser;\nDocumentParser.prototype.feed = function (input) {\n  var value = this.value;\n  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n  if (value.isError()) return value;\n  if (value.isDone()) {\n    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n    else if (input.isDone()) return value;\n  }\n  return new DocumentParser(value);\n};\n\n\nfunction BlockParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockParser.prototype = Object.create(StringIteratee.prototype);\nBlockParser.prototype.constructor = BlockParser;\nBlockParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new ValueBuilder();\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n          s = 2;\n        else return new StringIteratee.Error({expected: 'block value', found: c});\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 2) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 3;\n      else if (key.isError()) return key;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 4;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 6;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 5;\n      else if (input.isDone()) {\n        builder.appendField(key.state(), null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 1;\n        }\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockParser(builder, key, value, s);\n};\n\n\nfunction AttrParser(ident, value, s) {\n  StringIteratee.call(this);\n  this.ident = ident || null;\n  this.value = value || new BlockParser();\n  this.s = s || 1;\n}\nAttrParser.prototype = Object.create(StringIteratee.prototype);\nAttrParser.prototype.constructor = AttrParser;\nAttrParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var ident = this.ident;\n  var field;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n    ident = ident.feed(input);\n    if (ident.isDone()) s = 3;\n    else if (ident.isError()) return ident;\n  }\n  if (s === 3) {\n    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n      input.step();\n      s = 4;\n    }\n    else if (!input.isEmpty() || input.isDone()) {\n      field = {};\n      field[ident.state()] = null;\n      return new StringIteratee.Done(field);\n    }\n  }\n  if (s === 4) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = null;\n        return new StringIteratee.Done(field);\n      }\n      else s = 5;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) s = 6;\n    else if (value.isError()) return value;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n    if (!input.isEmpty()) {\n      if (c === 41/*')'*/) {\n        input.step();\n        field = {};\n        field[ident.state()] = value.state();\n        return new StringIteratee.Done(field);\n      }\n      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  return new AttrParser(ident, value, s);\n};\n\n\nfunction BlockValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nBlockValueParser.prototype = Object.create(StringIteratee.prototype);\nBlockValueParser.prototype.constructor = BlockValueParser;\nBlockValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 1) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          field = new AttrParser();\n          s = 2;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else if (isNameStartChar(c)) {\n          value = new IdentParser();\n          s = 4;\n        }\n        else if (c === 34/*'\"'*/) {\n          value = new StringParser();\n          s = 4;\n        }\n        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          value = new NumberParser();\n          s = 4;\n        }\n        else if (c === 37/*'%'*/) {\n          value = new DataParser();\n          s = 4;\n        }\n        else if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n      else if (input.isDone()) {\n        if (!builder) return new StringIteratee.Done(undefined);\n        else return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 2) {\n      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n      if (field.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendFields(field.state());\n        field = null;\n        s = 3;\n      }\n      else if (field.isError()) return field;\n    }\n    if (s === 3) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 1;\n      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder = builder || new ValueBuilder();\n        builder.appendValue(value.state());\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 6;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 6) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  return new BlockValueParser(builder, field, value, s);\n};\n\n\nfunction InlineValueParser(builder, field, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.field = field || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nInlineValueParser.prototype = Object.create(StringIteratee.prototype);\nInlineValueParser.prototype.constructor = InlineValueParser;\nInlineValueParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var field = this.field;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 64/*'@'*/) {\n        field = new AttrParser();\n        s = 2;\n      }\n      else if (c === 123/*'{'*/) {\n        if (builder) {\n          value = new RecordParser(builder);\n          s = 5;\n        }\n        else {\n          value = new RecordParser();\n          s = 4;\n        }\n      }\n      else if (c === 91/*'['*/) {\n        if (builder) {\n          value = new MarkupParser(builder);\n          s = 5;\n        }\n        else {\n          value = new MarkupParser();\n          s = 4;\n        }\n      }\n      else if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) {\n      if (!builder) return new StringIteratee.Done(null);\n      else return new StringIteratee.Done(builder.state());\n    }\n  }\n  if (s === 2) {\n    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n    if (field.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendFields(field.state());\n      field = null;\n      s = 3;\n    }\n    else if (field.isError()) return field;\n  }\n  if (s === 3) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        value = new RecordParser(builder);\n        s = 5;\n      }\n      else if (c === 91/*'['*/) {\n        value = new MarkupParser(builder);\n        s = 5;\n      }\n      else return new StringIteratee.Done(builder.state());\n    }\n    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n  }\n  if (s === 4) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) {\n      builder = builder || new ValueBuilder();\n      builder.appendValue(value.state());\n      return new StringIteratee.Done(builder.state());\n    }\n    else if (value.isError()) return value;\n  }\n  if (s === 5) {\n    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n    if (value.isDone()) return new StringIteratee.Done(builder.state());\n    else if (value.isError()) return value;\n  }\n  return new InlineValueParser(builder, field, value, s);\n};\n\n\nfunction RecordParser(builder, key, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.key = key || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nRecordParser.prototype = Object.create(StringIteratee.prototype);\nRecordParser.prototype.constructor = RecordParser;\nRecordParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var key = this.key;\n  var builder = this.builder || new RecordBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 123/*'{'*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n        else s = 3;\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      key = key || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n      if (key.isDone()) s = 4;\n      else if (key.isError()) return key;\n    }\n    if (s === 4) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 58/*':'*/) {\n          input.step();\n          s = 5;\n        }\n        else {\n          builder.appendValue(key.state());\n          key = null;\n          s = 7;\n        }\n      }\n      else if (input.isDone()) {\n        builder.appendValue(key.state());\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 5) {\n      while (!input.isEmpty() && isSpace(input.head())) input.step();\n      if (!input.isEmpty()) s = 6;\n      else if (input.isDone()) {\n        builder.appendField(key, null);\n        return new StringIteratee.Done(builder.state());\n      }\n    }\n    if (s === 6) {\n      value = value || new BlockValueParser();\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendField(key.state(), value.state());\n        key = null;\n        value = null;\n        s = 7;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 7) {\n      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n      if (!input.isEmpty()) {\n        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n          input.step();\n          s = 2;\n        }\n        else if (c === 125/*'}'*/) {\n          input.step();\n          return new StringIteratee.Done(builder.state());\n        }\n       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new RecordParser(builder, key, value, s);\n};\n\n\nfunction MarkupParser(builder, text, value, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.text = text || null;\n  this.value = value || null;\n  this.s = s || 1;\n}\nMarkupParser.prototype = Object.create(StringIteratee.prototype);\nMarkupParser.prototype.constructor = MarkupParser;\nMarkupParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var value = this.value;\n  var text = this.text;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 91/*'['*/) {\n        input.step();\n        s = 2;\n      }\n      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      while (!input.isEmpty() && (c = input.head(),\n          c !== 64/*'@'*/ &&\n          c !== 91/*'['*/ &&\n          c !== 92/*'\\\\'*/ &&\n          c !== 93/*']'*/ &&\n          c !== 123/*'{'*/ &&\n          c !== 125/*'}'*/)) {\n        input.step();\n        text = text || new StringBuilder();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 93/*']'*/) {\n          input.step();\n          builder = builder || new RecordBuilder();\n          if (text) builder.appendValue(text.state());\n          return new StringIteratee.Done(builder.state());\n        }\n        else if (c === 64/*'@'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new InlineValueParser();\n          s = 3;\n        }\n        else if (c === 123/*'{'*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new RecordParser(builder);\n          s = 4;\n        }\n        else if (c === 91/*'['*/) {\n          builder = builder || new RecordBuilder();\n          if (text) {\n            builder.appendValue(text.state());\n            text = null;\n          }\n          value = new MarkupParser(builder);\n          s = 4;\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 5;\n        }\n        else new StringIteratee.Error({found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        builder.appendValue(value.state());\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 4) {\n      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n      if (value.isDone()) {\n        value = null;\n        s = 2;\n      }\n      else if (value.isError()) return value;\n    }\n    if (s === 5) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        text = text || new StringBuilder();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new MarkupParser(builder, text, value, s);\n};\n\n\nfunction IdentParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nIdentParser.prototype = Object.create(StringIteratee.prototype);\nIdentParser.prototype.constructor = IdentParser;\nIdentParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n      builder = builder || new StringBuilder();\n      input.step();\n      builder.append(c);\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) {\n      var value = builder.state();\n      if (value === 'true') value = true;\n      else if (value === 'false') value = false;\n      return new StringIteratee.Done(value);\n    }\n  }\n  return new IdentParser(builder, s);\n};\n\n\nfunction StringParser(text, s) {\n  StringIteratee.call(this);\n  this.text = text || null;\n  this.s = s || 1;\n}\nStringParser.prototype = Object.create(StringIteratee.prototype);\nStringParser.prototype.constructor = StringParser;\nStringParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var text = this.text;\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      text = text || new StringBuilder();\n      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n        input.step();\n        text.append(c);\n      }\n      if (!input.isEmpty()) {\n        if (c === 34/*'\"'*/) {\n          input.step();\n          return new StringIteratee.Done(text.state());\n        }\n        else if (c === 92/*'\\\\'*/) {\n          input.step();\n          s = 3;\n        }\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 3) {\n      if (!input.isEmpty()) {\n        c = input.head();\n        if (c === 34/*'\"'*/ ||\n            c === 47/*'/'*/ ||\n            c === 64/*'@'*/ ||\n            c === 91/*'['*/ ||\n            c === 92/*'\\\\'*/ ||\n            c === 93/*']'*/ ||\n            c === 123/*'{'*/ ||\n            c === 125/*'}'*/) {\n          input.step();\n          text.append(c);\n          s = 2;\n        }\n        else if (c === 98/*'b'*/) {\n          input.step();\n          text.append(8/*'\\b'*/);\n          s = 2;\n        }\n        else if (c === 102/*'f'*/) {\n          input.step();\n          text.append(12/*'\\f'*/);\n          s = 2;\n        }\n        else if (c === 110/*'n'*/) {\n          input.step();\n          text.append(10/*'\\n'*/);\n          s = 2;\n        }\n        else if (c === 114/*'r'*/) {\n          input.step();\n          text.append(13/*'\\r'*/);\n          s = 2;\n        }\n        else if (c === 116/*'t'*/) {\n          input.step();\n          text.append(9/*'\\t'*/);\n          s = 2;\n        }\n        else return new StringIteratee.Error({expected: 'escape character', found: c});\n      }\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new StringParser(text, s);\n};\n\n\nfunction NumberParser(builder, s) {\n  StringIteratee.call(this);\n  this.builder = builder || null;\n  this.s = s || 1;\n}\nNumberParser.prototype = Object.create(StringIteratee.prototype);\nNumberParser.prototype.constructor = NumberParser;\nNumberParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var builder = this.builder || new StringBuilder();\n  if (s === 1) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 2;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 2) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 48/*'0'*/) {\n        input.step();\n        builder.append(c);\n        s = 4;\n      }\n      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 3;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 3) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 4;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 4) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 46/*'.'*/) {\n        input.step();\n        builder.append(c);\n        s = 5;\n      }\n      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input.step();\n        builder.append(c);\n        s = 8;\n      }\n      else return new StringIteratee.Done(Number(builder.state()));\n    }\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 5) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 6;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 6) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty()) s = 7;\n    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 7) {\n    c = input.head();\n    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n      input.step();\n      builder.append(c);\n      s = 8;\n    }\n    else return new StringIteratee.Done(Number(builder.state()));\n  }\n  if (s === 8) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n        input.step();\n        builder.append(c);\n      }\n      s = 9;\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 9) {\n    if (!input.isEmpty()) {\n      c = input.head();\n      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n        input.step();\n        builder.append(c);\n        s = 10;\n      }\n      else return new StringIteratee.Error({expected: 'digit', found: c});\n    }\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  if (s === 10) {\n    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n      input.step();\n      builder.append(c);\n    }\n    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n  }\n  return new NumberParser(builder, s);\n};\n\n\nfunction DataParser(data, s) {\n  StringIteratee.call(this);\n  this.data = data || null;\n  this.s = s || 1;\n}\nDataParser.prototype = Object.create(StringIteratee.prototype);\nDataParser.prototype.constructor = DataParser;\nDataParser.prototype.feed = function (input) {\n  var c = 0;\n  var s = this.s;\n  var data = this.data || new DataBuilder();\n  if (s === 1) {\n    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n      input.step();\n      s = 2;\n    }\n    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n  }\n  while (!input.isEmpty() || input.isDone()) {\n    if (s === 2) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 3;\n      }\n      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n    }\n    if (s === 3) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n        input.step();\n        data.appendBase64Char(c);\n        s = 4;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 4) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 5;\n        else s = 6;\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    if (s === 5) {\n      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        if (c !== 61/*'='*/) s = 2;\n        else return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n    else if (s === 6) {\n      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n        input.step();\n        data.appendBase64Char(c);\n        return new StringIteratee.Done(data.state());\n      }\n      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n    }\n  }\n  return new DataParser(data, s);\n};\n\n\nfunction ReconWriter(builder) {\n  Object.defineProperty(this, 'builder', {value: builder || new StringBuilder()});\n}\nReconWriter.prototype.writeValue = function (value) {\n  if (isRecord(value)) this.writeRecord(value);\n  else if (isObject(value)) this.writeRecord(coerceObject(value));\n  else if (typeof value === 'string') this.writeText(value);\n  else if (typeof value === 'number') this.writeNumber(value);\n  else if (typeof value === 'boolean') this.writeBool(value);\n  else if (value instanceof Uint8Array) this.writeData(value);\n};\nReconWriter.prototype.writeItem = function (item) {\n  if (isField(item)) this.writeSlots(item);\n  else this.writeValue(item);\n};\nReconWriter.prototype.writeAttrs = function (attrs) {\n  var keys = Object.keys(attrs);\n  for (var i = 0, n = keys.length; i < n; i += 1) {\n    var key = keys[i];\n    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n      var value = attrs[key];\n      this.writeAttr(key.substring(1), value);\n    }\n  }\n};\nReconWriter.prototype.writeAttr = function (key, value) {\n  this.builder.append(64/*'@'*/);\n  this.writeIdent(key);\n  if (value !== null) {\n    this.builder.append(40/*'('*/);\n    this.writeBlock(value);\n    this.builder.append(41/*')'*/);\n  }\n};\nReconWriter.prototype.writeSlots = function (slots) {\n  var keys = Object.keys(slots);\n  var key;\n  var value;\n  var n = keys.length;\n  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n    key = slots.$key;\n    value = slots.$value;\n    this.writeSlot(key, value);\n  }\n  else for (var i = 0; i < n; i += 1) {\n    key = keys[i];\n    value = slots[key];\n    if (i > 0) this.builder.append(44/*','*/);\n    this.writeSlot(key, value);\n  }\n};\nReconWriter.prototype.writeSlot = function (key, value) {\n  this.writeValue(key);\n  this.builder.append(58/*':'*/);\n  if (value !== null) this.writeValue(value);\n};\nReconWriter.prototype.writeBlock = function (value) {\n  if (!isObject(value)) this.writeValue(value);\n  else {\n    if (!isRecord(value)) value = coerceObject(value);\n    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n    else {\n      this.builder.append(123/*'{'*/);\n      this.builder.append(125/*'}'*/);\n    }\n  }\n};\nReconWriter.prototype.writeRecord = function (record) {\n  if (record.length > 0) this.writeItems(record, false, false);\n  else {\n    this.builder.append(123/*'{'*/);\n    this.builder.append(125/*'}'*/);\n  }\n};\nReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n  var i = 0;\n  var n = items.length;\n  var inBraces = false;\n  var inBrackets = false;\n  var first = true;\n  while (i < n) {\n    var item = items[i];\n    i += 1;\n    if (inBrackets && isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.builder.append(93/*']'*/);\n      inBrackets = false;\n    }\n    if (isAttr(item)) {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      else if (inBrackets) {\n        this.builder.append(93/*']'*/);\n        inBrackets = false;\n      }\n      this.writeAttrs(item);\n      first = false;\n    }\n    else if (inBrackets && typeof item === 'string') {\n      if (inBraces) {\n        this.builder.append(125/*'}'*/);\n        inBraces = false;\n      }\n      this.writeMarkupText(item);\n    }\n    else if (inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inBrackets) {\n      if (isRecord(item) && isMarkupSafe(item)) {\n        this.writeItems(item, false, true);\n        if (i < n && typeof items[i] === 'string') {\n          this.writeMarkupText(items[i]);\n          i += 1;\n        }\n        else if (i < n && !isAttr(items[i])) {\n          this.builder.append(123/*'{'*/);\n          inBraces = true;\n          first = true;\n        }\n        else {\n          this.builder.append(93/*']'*/);\n          inBrackets = false;\n        }\n      }\n      else {\n        this.builder.append(123/*'{'*/);\n        this.writeItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    else if (typeof item === 'string' &&\n        i < n && !isField(items[i]) &&\n        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      inBrackets = true;\n    }\n    else if (inBlock && !inBraces) {\n      if (!first) this.builder.append(44/*','*/);\n      else first = false;\n      this.writeItem(item);\n    }\n    else if (inMarkup && typeof item === 'string' && i >= n) {\n      this.builder.append(91/*'['*/);\n      this.writeMarkupText(item);\n      this.builder.append(93/*']'*/);\n    }\n    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n            (!first && i >= n || i < n && isAttr(items[i]))) {\n      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n                     typeof item === 'number' ||\n                     typeof item === 'boolean'))\n        this.builder.append(32/*' '*/);\n      this.writeValue(item);\n    }\n    else {\n      this.builder.append(123/*'{'*/);\n      this.writeItem(item);\n      inBraces = true;\n      first = false;\n    }\n  }\n  if (inBraces) this.builder.append(125/*'}'*/);\n  else if (inBrackets) this.builder.append(93/*']'*/);\n};\nReconWriter.prototype.isIdent = function (text) {\n  var cs = new StringIterator(text);\n  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n  cs.step();\n  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n  return cs.isEmpty();\n};\nReconWriter.prototype.writeText = function (text) {\n  if (this.isIdent(text)) this.writeIdent(text);\n  else this.writeString(text);\n};\nReconWriter.prototype.writeIdent = function (ident) {\n  this.builder.appendString(ident);\n};\nReconWriter.prototype.writeString = function (string) {\n  var cs = new StringIterator(string);\n  this.builder.append(34/*'\"'*/);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 34/*'\"'*/:\n      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n  this.builder.append(34/*'\"'*/);\n};\nReconWriter.prototype.writeMarkupText = function (text) {\n  var cs = new StringIterator(text);\n  while (!cs.isEmpty()) {\n    var c = cs.head();\n    switch (c) {\n      case 64/*'@'*/:\n      case 91/*'['*/:\n      case 92/*'\\\\'*/:\n      case 93/*']'*/:\n      case 123/*'{'*/:\n      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n      default: this.builder.append(c);\n    }\n    cs.step();\n  }\n};\nReconWriter.prototype.writeNumber = function (number) {\n  this.builder.appendString(number.toString());\n};\nReconWriter.prototype.writeBool = function (bool) {\n  this.builder.appendString(bool.toString());\n};\nReconWriter.prototype.writeData = function (data) {\n  function encodeBase64Digit(x) {\n    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n    else if (x === 62) return 43/*'+'*/;\n    else if (x === 63) return 47/*'/'*/;\n  }\n  this.builder.append(37/*'%'*/);\n  var i = 0;\n  var n = data.length;\n  var x, y, z;\n  while (i + 2 < n) {\n    x = data[i];\n    y = data[i + 1];\n    z = data[i + 2];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n    this.builder.append(encodeBase64Digit(z & 0x3F));\n    i += 3;\n  }\n  if (i + 1 < n) {\n    x = data[i];\n    y = data[i + 1];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n    this.builder.append(61/*'='*/);\n    i += 2;\n  }\n  else if (i < n) {\n    x = data[i];\n    this.builder.append(encodeBase64Digit(x >>> 2));\n    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n    this.builder.append(61/*'='*/);\n    this.builder.append(61/*'='*/);\n    i += 1;\n  }\n};\nReconWriter.prototype.state = function () {\n  return this.builder.state();\n};\n\n\nmodule.exports = function (value) {\n  return coerce.apply(null, arguments);\n};\nexports = module.exports;\nexports.parse = parse;\nexports.stringify = stringify;\nexports.base64 = base64;\nexports.isRecord = isRecord;\nexports.head = head;\nexports.tail = tail;\nexports.tag = tag;\nexports.get = get;\nexports.set = set;\nexports.concat = concat;\nexports.equal = equal;\nexports.config = config;\n"],"sourceRoot":"/source/"}